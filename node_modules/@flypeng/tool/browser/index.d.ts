interface LocationInfo {
    href: string;
    hostname: string;
    port: number;
    pathname: string;
    params: string;
    hash: string;
}
/**
 * 返回当前页面链接相关信息
 * @returns
 */
declare function useLocationInfo(): Readonly<Partial<LocationInfo>> | null;

/**
 * 如果不是移动设备则返回false，如果是移动设备则会判断是Apple还是Android
 * @returns Apple | Android | false
 */
declare function useMobileDevice(): false | "Apple" | "Android";

/**
 * 拷贝选择器的文本内容
 * @param selector DOM selector
 * @returns
 */
declare function useCopySelector(selector: string): boolean;

/**
 * 拷贝指定内容到剪贴板中
 * @param content
 * @returns
 */
declare function useCopyContent(content: string): void;

/**
 * 获取URL参数中指定参数值
 * @param param
 * @param origin
 * @returns
 */
declare function useGetUrlParam(param: string, origin?: string): string | null;

/**
 * 动态加载脚本文件
 * @param url
 * @param callback
 */
declare function useDynamicLoadScript(url: string, callback?: (...args: unknown[]) => boolean): Promise<void>;

/**
 * 触发页面全屏
 * @returns
 */
declare function useToggleFullScreen(): Promise<void>;

declare class TouchBottomClass {
    private isEnable;
    private isEnd;
    private scrollCallback;
    private callback;
    private selector;
    constructor(callback: Function, selector: Element);
    private start;
    private end;
    stop(): void;
}
/**
 * 滚动到底部并执行回调函数
 * @param selector
 * @param callback
 * @returns
 */
declare function useScrollToBottom(selector: Element, callback: Function): TouchBottomClass;

/**
 * 从本地存储中获取Key的值
 * @param key
 * @returns
 */
declare function useGetLocalKey(key: string): string | null;

/**
 * 给本地存储中存值
 * @param key
 * @param value
 */
declare function useSetLocalKey(key: string, value: unknown): void;

/**
 * clear local storage
 */
declare function useClearLocal(): void;

/**
 * remove key from local storage
 * @param key
 */
declare function useRemoveLocalKey(key: string): void;

/**
 * 获取浏览器版本信息（浏览器类型和版本号）
 * @returns
 */
declare function useGetBrowserInfo(): {
    type: string;
    version: number;
};

declare const _default$1: {
    isUndefined: (value: unknown) => boolean;
    isString: (value: unknown) => boolean;
    isNumber: (value: unknown) => boolean;
    isObject: (value: unknown) => boolean;
    isArray: (value: unknown) => boolean;
    isNull: (value: unknown) => boolean;
    isFunction: (value: unknown) => boolean;
    isDate: (value: unknown) => boolean;
    isMap: (value: unknown) => boolean;
    isSet: (value: unknown) => boolean;
    isRegExp: (value: unknown) => boolean;
    isBrowser: () => boolean;
    isWechatBrowser: () => boolean;
    isMobile: () => boolean;
    typeToString: (value: unknown) => string;
};

/**
 * 防抖函数
 * @param callback
 * @param delay （单位：毫秒）
 */
declare function useDebounce(callback: Function, delay: number): (this: unknown, ...rest: unknown[]) => void;

/**
 * 深拷贝对象
 * @param targetObj 目标对象
 * @param hashMap
 * @returns
 */
declare function useDeepClone(targetObj: any, hashMap?: WeakMap<object, any>): any;

/**
 * 节流函数
 * @param callback
 * @param delay
 */
declare function useThrottle(callback: Function, delay: number): (this: unknown, ...rest: unknown[]) => any;

/**
 * 保证函数只执行一次
 * @param callback
 * @returns
 */
declare function useOnce(callback: () => void): () => void;

declare function useLocalStorage(): {
    get: (key: string) => string | null;
    set: (key: string, value: any) => string | null;
    clear: () => void;
    remove: (key: string) => void;
};

/**
 * 格式类型
 */
type DateFormatOption = 'yyyy-MM-dd hh:mm:ss' | 'yyyy-MM-dd' | 'yyyy/MM/dd' | 'hh:mm:ss' | 'yyyy' | 'MM' | 'dd' | 'hh' | 'mm' | 'ss';
/**
 * 格式化日期函数
 * @param format
 * @param date
 */
declare function useFormatDate(format: DateFormatOption, date?: string | number | Date): string;

/**
 * 判断是否为闰年（能被4整除，但不能被100整除 或者 能被400整除）
 * @param value
 */
declare function useLeapYear(value: number): boolean;
/**
 * 获取今天是星期几
 * @returns
 */
declare function useTodayWeek(): string;
/**
 * 获取某年某月的天数
 * @param year
 * @param month
 * @returns
 */
declare function useMonthNumber(year: number, month: number): number | undefined;
/**
 * 指定日期添加天数
 * @param number
 */
type AddDateDayFormatOption<T> = T extends 'yyyy-MM-dd hh:mm:ss' | 'yyyy-MM-dd' | 'yyyy/MM/dd' ? T : never;
declare function useAddDateDay(value: number, date?: string | Date, dateFormat?: AddDateDayFormatOption<DateFormatOption>): string;
/**
 * 计算两个日期相差的天数
 * @param dateOne
 * @param dateTwo
 * @returns
 */
declare function useDifDaysValue(dateOne: string | Date, dateTwo?: string | Date): number;
/**
 * 获取当月的第一天的日期
 */
declare function useGetFirstDay(): string;
/**
 * 获取当月的最后一天的日期
 */
declare function useGetLastDay(): string;
/**
 * 判断日期是否是一个正确有效的日期
 * @param value yyyy-MM-dd
 * @returns
 */
declare function useIsValidDate(value: string): boolean;
declare const _default: {
    useLeapYear: typeof useLeapYear;
    useTodayWeek: typeof useTodayWeek;
    useMonthNumber: typeof useMonthNumber;
    useAddDateDay: typeof useAddDateDay;
    useDifDaysValue: typeof useDifDaysValue;
    useGetFirstDay: typeof useGetFirstDay;
    useGetLastDay: typeof useGetLastDay;
    useIsValidDate: typeof useIsValidDate;
};

/**
 * Calendar switch
 * @param date: date format yyyy-MM-dd
 * @param type: 'solar' | 'lunar'
 * @returns
 */
declare function useCalendarSwitch(date: string, type: 'solar' | 'lunar'): number | {
    lYear: number;
    lMonth: number;
    lDay: number;
    Animal: string;
    IMonthCn: string;
    IDayCn: string;
    cYear: number;
    cMonth: number;
    cDay: number;
    gzYear: string;
    gzMonth: string;
    gzDay: string;
    isToday: boolean;
    isLeap: boolean;
    nWeek: number;
    ncWeek: string;
    isTerm: boolean;
    Term: string | null;
    astro: string;
};

/**
 * 下载在线链接资源文件
 * @param url
 * @param fileName
 */
declare function useDownloadFile(url: string, fileName?: string): Promise<void>;

/**
 * 当浏览器页面切换时执行的回调函数
 * @param callback
 */
declare function usePageTabSwitch(callback: () => void): () => void;

/**
 * 阻止鼠标右键点击默认事件并且执行回调函数
 * @param node
 * @param callback
 */
declare function useCustomContextMenu(node: HTMLElement, callback: () => void): () => void;

/**
 * 禁止用户以任何方式查看网页源代码（Ctrl+S、Ctrl+U、Ctrl+Shift+I、Ctrl+Shift+C、点击 F12 和 点击鼠标右键）
 * @param callback
 * @returns
 */
declare function usePreventSeeSourceCode(callback?: () => void): () => void;

/**
 * 监听当前网页是否在线执行回调
 * @param online
 * @param offline
 * @returns
 */
declare function useListenNetwork(online: (...args: any[]) => void, offline: (...args: any[]) => void): void;

/**
 * 滚到页面顶部
 */
declare function useGoToTop(): void;

/**
 * 滚动到对应DOM元素节点上
 * @param element
 */
declare function useScrollToElement(element: HTMLElement): void;

/**
 * 生成随机整数 [min, max]
 * @param min
 * @param max
 * @returns
 */
declare function useRandomInteger(min: number, max: number): number;

/**
 * 数字根据指定数量进行分割
 * @param value
 * @param separateNumber
 * @returns
 */
declare function useNumberSeparate(value: number, separateNumber?: number): string;

/**
 * 判断对象是否为空对象
 * @param target
 * @returns
 */
declare function useObjectIsEmpty(target: Record<string, unknown> | null | undefined): boolean;

/**
 * 删除对象中属性为Null的值
 */
declare function useDelEmptyValue<T extends Object>(targetObj: T): T | undefined;

/**
 * 检测电话号码是否有效
 * @param value
 * @returns
 */
declare function useCheckPhoneNumber(value: string): boolean;

/**
 * 检测身份证号码是否有效
 * @param value
 * @returns
 */
declare function useCheckIdCard(value: string): boolean;

/**
 * 校测邮箱地址是否有效
 * @param value
 * @returns
 */
declare function useCheckEmailUrl(value: string): boolean;

/**
 * 校验 QQ 号码（5-11 位）格式是否正确
 * @param value
 * @returns
 */
declare function useCheckQQNumber(value: string): boolean;

/**
 * 检测字符串中是否包含中文
 * @param value
 * @returns
 */
declare function useCheckIncludeChinese(value: string): boolean;

/**
 * 检测字符串中是否包含数字
 * @param value
 * @returns
 */
declare function useCheckIncludeNumber(value: string): boolean;

/**
 * 验证URL是否是有效的
 * @param value
 * @returns
 */
declare function useCheckUrl(value: string): boolean;

type StrengthLevel = 0 | 1 | 2 | 3;
/**
 * Check strength level of password
 * @param password
 * @param defineLength
 * @returns
 */
declare function useCheckPasswordStrength(password: string, defineLength?: number): StrengthLevel;

/**
 * 判断字符串中是否包含Emoji表情
 * @param value
 * @returns
 */
declare function useCheckIncludeEmoji(value: string): boolean;

interface DataSensitiveOptions {
    sensitiveSource: string;
    startIndex?: number;
    endIndex?: number;
    replaceSource?: string;
}
/**
 * 敏感数据进行脱敏处理
 * @param options
 * @returns
 */
declare function useDataSensitive(options: DataSensitiveOptions): string | undefined;

/**
 * 生成随机字符串
 * @param length
 * @param supportNumber 是否参杂数字（默认不参杂）
 * @returns
 */
declare function useRandomString(length?: number, supportNumber?: boolean): string;

declare enum TransformCaseTypeEnum {
    LOWER_CASE = 0,
    UPPER_CASE = 1,
    FIRST_LOWER_CASE = 2
}
type TransformCaseType = (typeof TransformCaseTypeEnum)[keyof typeof TransformCaseTypeEnum];
/**
 * 将字符串转换大小写
 * @param str
 * @param type
 * @returns
 */
declare function useTransformCase(str: string, type: TransformCaseType): string;

/**
 * 随机生成HEX色值的颜色
 * @returns
 */
declare function useRandomHexColor(): string;

export { TouchBottomClass, useCalendarSwitch, useCheckEmailUrl, useCheckIdCard, useCheckIncludeChinese, useCheckIncludeEmoji, useCheckIncludeNumber, useCheckPasswordStrength, useCheckPhoneNumber, useCheckQQNumber, useCheckUrl, useClearLocal, _default as useCommonDate, _default$1 as useCommonType, useCopyContent, useCopySelector, useCustomContextMenu, useDataSensitive, useDebounce, useDeepClone, useDelEmptyValue, useDownloadFile, useDynamicLoadScript, useFormatDate, useGetBrowserInfo, useGetLocalKey, useGetUrlParam, useGoToTop, useListenNetwork, useLocalStorage, useLocationInfo, useMobileDevice, useNumberSeparate, useObjectIsEmpty, useOnce, usePageTabSwitch, usePreventSeeSourceCode, useRandomHexColor, useRandomInteger, useRandomString, useRemoveLocalKey, useScrollToBottom, useScrollToElement, useSetLocalKey, useThrottle, useToggleFullScreen, useTransformCase };
