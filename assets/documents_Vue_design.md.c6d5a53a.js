import{_ as e,c as a,o as t,O as o}from"./chunks/framework.f30108ad.js";const m=JSON.parse('{"title":"《Vue.js设计与实现》","description":"","frontmatter":{},"headers":[],"relativePath":"documents/Vue/design.md","filePath":"documents/Vue/design.md","lastUpdated":1687253339000}'),r={name:"documents/Vue/design.md"},s=o('<h1 id="《vue-js设计与实现》" tabindex="-1">《Vue.js设计与实现》 <a class="header-anchor" href="#《vue-js设计与实现》" aria-label="Permalink to &quot;《Vue.js设计与实现》&quot;">​</a></h1><h2 id="_1-框架设计概述" tabindex="-1">1. 框架设计概述 <a class="header-anchor" href="#_1-框架设计概述" aria-label="Permalink to &quot;1. 框架设计概述&quot;">​</a></h2><h3 id="_1-1-权衡的艺术" tabindex="-1">1.1 权衡的艺术 <a class="header-anchor" href="#_1-1-权衡的艺术" aria-label="Permalink to &quot;1.1 权衡的艺术&quot;">​</a></h3><blockquote><p>框架的设计，本身就是一种权衡的艺术</p></blockquote><h4 id="命令式与声明式" tabindex="-1">命令式与声明式 <a class="header-anchor" href="#命令式与声明式" aria-label="Permalink to &quot;命令式与声明式&quot;">​</a></h4><ul><li>命令式：注重过程</li><li>声明式：注重结果</li></ul><p>Vue封装了命令式的过程，同时暴露声明式的使用方法。</p><h4 id="性能与可维护性的权衡" tabindex="-1">性能与可维护性的权衡 <a class="header-anchor" href="#性能与可维护性的权衡" aria-label="Permalink to &quot;性能与可维护性的权衡&quot;">​</a></h4><blockquote><p>命令式的性能(直接修改的性能消耗) &gt; 声明式的性能(找出差异 + 直接修改)</p></blockquote>',9),i=[s];function l(n,d,c,u,h,_){return t(),a("div",null,i)}const b=e(r,[["render",l]]);export{m as __pageData,b as default};
